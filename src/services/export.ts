// Life Plan Export Service
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

export interface LifePlan {
  id: string;
  title: string;
  description: string;
  goals: Array<{
    title: string;
    description: string;
    progress: number;
    category: string;
  }>;
  insights: string[];
  recommendations: string[];
  createdAt: Date;
  userId?: string;
}

export class ExportService {
  async exportLifePlanAsPDF(lifePlan: LifePlan): Promise<Blob> {
    try {
      // Create a temporary div with the life plan content
      const tempDiv = document.createElement('div');
      tempDiv.style.position = 'absolute';
      tempDiv.style.left = '-9999px';
      tempDiv.style.width = '800px';
      tempDiv.style.padding = '40px';
      tempDiv.style.backgroundColor = 'white';
      tempDiv.style.fontFamily = 'Inter, sans-serif';

      tempDiv.innerHTML = this.generateLifePlanHTML(lifePlan);
      document.body.appendChild(tempDiv);

      // Convert to canvas
      const canvas = await html2canvas(tempDiv, {
        width: 800,
        height: 1200,
        scale: 2,
        backgroundColor: '#ffffff',
      });

      // Remove temporary div
      document.body.removeChild(tempDiv);

      // Create PDF
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgData = canvas.toDataURL('image/png');
      
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = (canvas.height * pdfWidth) / canvas.width;

      pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
      
      return pdf.output('blob');
    } catch (error) {
      console.error('Failed to export PDF:', error);
      throw error;
    }
  }

  async exportLifePlanAsImage(lifePlan: LifePlan): Promise<Blob> {
    try {
      const tempDiv = document.createElement('div');
      tempDiv.style.position = 'absolute';
      tempDiv.style.left = '-9999px';
      tempDiv.style.width = '1200px';
      tempDiv.style.padding = '60px';
      tempDiv.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
      tempDiv.style.color = 'white';
      tempDiv.style.fontFamily = 'Inter, sans-serif';
      tempDiv.style.borderRadius = '20px';

      tempDiv.innerHTML = this.generateSocialShareHTML(lifePlan);
      document.body.appendChild(tempDiv);

      const canvas = await html2canvas(tempDiv, {
        width: 1200,
        height: 630,
        scale: 2,
        backgroundColor: null,
      });

      document.body.removeChild(tempDiv);

      return new Promise((resolve) => {
        canvas.toBlob((blob) => {
          resolve(blob!);
        }, 'image/png');
      });
    } catch (error) {
      console.error('Failed to export image:', error);
      throw error;
    }
  }

  private generateLifePlanHTML(lifePlan: LifePlan): string {
    return `
      <div style="max-width: 800px; margin: 0 auto;">
        <div style="text-align: center; margin-bottom: 40px;">
          <h1 style="font-size: 32px; font-weight: bold; color: #1f2937; margin-bottom: 10px;">
            üßû ${lifePlan.title}
          </h1>
          <p style="font-size: 16px; color: #6b7280; margin-bottom: 20px;">
            Generated by AI Genie - Your Universal Life Copilot
          </p>
          <p style="font-size: 14px; color: #9ca3af;">
            Created on ${lifePlan.createdAt.toLocaleDateString()}
          </p>
        </div>

        <div style="margin-bottom: 30px;">
          <h2 style="font-size: 20px; font-weight: bold; color: #374151; margin-bottom: 15px;">
            üìù Overview
          </h2>
          <p style="font-size: 14px; line-height: 1.6; color: #4b5563;">
            ${lifePlan.description}
          </p>
        </div>

        <div style="margin-bottom: 30px;">
          <h2 style="font-size: 20px; font-weight: bold; color: #374151; margin-bottom: 15px;">
            üéØ Goals & Progress
          </h2>
          ${lifePlan.goals.map(goal => `
            <div style="margin-bottom: 20px; padding: 15px; border: 1px solid #e5e7eb; border-radius: 8px;">
              <h3 style="font-size: 16px; font-weight: 600; color: #1f2937; margin-bottom: 8px;">
                ${goal.title}
              </h3>
              <p style="font-size: 14px; color: #6b7280; margin-bottom: 10px;">
                ${goal.description}
              </p>
              <div style="display: flex; align-items: center; gap: 10px;">
                <div style="flex: 1; height: 8px; background-color: #e5e7eb; border-radius: 4px; overflow: hidden;">
                  <div style="height: 100%; background-color: #10b981; width: ${goal.progress}%;"></div>
                </div>
                <span style="font-size: 12px; font-weight: 600; color: #374151;">
                  ${goal.progress}%
                </span>
              </div>
            </div>
          `).join('')}
        </div>

        <div style="margin-bottom: 30px;">
          <h2 style="font-size: 20px; font-weight: bold; color: #374151; margin-bottom: 15px;">
            üí° Key Insights
          </h2>
          <ul style="list-style: none; padding: 0;">
            ${lifePlan.insights.map(insight => `
              <li style="margin-bottom: 10px; padding-left: 20px; position: relative;">
                <span style="position: absolute; left: 0; color: #10b981;">‚úì</span>
                <span style="font-size: 14px; color: #4b5563;">${insight}</span>
              </li>
            `).join('')}
          </ul>
        </div>

        <div style="margin-bottom: 30px;">
          <h2 style="font-size: 20px; font-weight: bold; color: #374151; margin-bottom: 15px;">
            üöÄ Recommendations
          </h2>
          <ol style="padding-left: 20px;">
            ${lifePlan.recommendations.map(rec => `
              <li style="margin-bottom: 10px; font-size: 14px; color: #4b5563; line-height: 1.5;">
                ${rec}
              </li>
            `).join('')}
          </ol>
        </div>

        <div style="text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb;">
          <p style="font-size: 12px; color: #9ca3af;">
            Created with AI Genie ‚Ä¢ aigenie.app
          </p>
        </div>
      </div>
    `;
  }

  private generateSocialShareHTML(lifePlan: LifePlan): string {
    return `
      <div style="text-align: center; height: 100%; display: flex; flex-direction: column; justify-content: center;">
        <div style="margin-bottom: 30px;">
          <h1 style="font-size: 48px; font-weight: bold; margin-bottom: 20px;">
            üßû My Life Plan
          </h1>
          <h2 style="font-size: 32px; font-weight: 600; margin-bottom: 15px;">
            ${lifePlan.title}
          </h2>
          <p style="font-size: 20px; opacity: 0.9; max-width: 800px; margin: 0 auto;">
            ${lifePlan.description.substring(0, 150)}${lifePlan.description.length > 150 ? '...' : ''}
          </p>
        </div>

        <div style="display: flex; justify-content: center; gap: 40px; margin-bottom: 30px;">
          <div style="text-align: center;">
            <div style="font-size: 36px; font-weight: bold;">${lifePlan.goals.length}</div>
            <div style="font-size: 16px; opacity: 0.8;">Goals Set</div>
          </div>
          <div style="text-align: center;">
            <div style="font-size: 36px; font-weight: bold;">
              ${Math.round(lifePlan.goals.reduce((sum, goal) => sum + goal.progress, 0) / lifePlan.goals.length)}%
            </div>
            <div style="font-size: 16px; opacity: 0.8;">Progress</div>
          </div>
          <div style="text-align: center;">
            <div style="font-size: 36px; font-weight: bold;">${lifePlan.insights.length}</div>
            <div style="font-size: 16px; opacity: 0.8;">Insights</div>
          </div>
        </div>

        <div style="font-size: 18px; opacity: 0.8;">
          Generated by AI Genie ‚Ä¢ aigenie.app
        </div>
      </div>
    `;
  }

  downloadBlob(blob: Blob, filename: string) {
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  async shareToSocial(blob: Blob, text: string) {
    if (navigator.share && navigator.canShare) {
      try {
        const file = new File([blob], 'my-life-plan.png', { type: 'image/png' });
        await navigator.share({
          title: 'My AI Genie Life Plan',
          text: text,
          files: [file],
        });
      } catch (error) {
        console.error('Native sharing failed:', error);
        this.fallbackShare(blob, text);
      }
    } else {
      this.fallbackShare(blob, text);
    }
  }

  private fallbackShare(blob: Blob, text: string) {
    // Copy text to clipboard and download image
    navigator.clipboard.writeText(text).then(() => {
      this.downloadBlob(blob, 'my-life-plan.png');
      alert('Text copied to clipboard! Image downloaded. Share on your favorite platform!');
    });
  }
}